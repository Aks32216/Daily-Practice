#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cmath>
#include <map>
#include <string.h>
#include <algorithm>
#include <bits/stdc++.h>
#include <vector>
 
using namespace std;
#define set_precision cout << fixed << setprecision(10)
#define rep(i, a, b) for (int i = a; i < b; i++)
#define repb(i, a, b) for (int i = a; i >= b; i--)
#define replb(i, a, b) for (ll i = a; i >= b; i--)
#define repl(i, a, b) for (ll i = a; i < b; i++)
#define repit(arr) for (auto it = arr.begin(); it != arr.end(); 
#define vi vector<int>
#define vb vector<bool>
#define vs vector<string>
#define vl vector<long long int>
#define Vi vector<vector<int>>
#define vpi vector<pair<int,int> >
#define seti set<int>
#define setl set<ll>
#define dseti set<int, greater<int>>
#define dsetl set<ll, greater<ll>>
#define mseti multiset<int>
#define msetl multiset<ll>
#define dmseti multiset<int, greater<int>>
#define dmsetl multiset<ll, greater<ll>>
#define sortA(arr) sort(arr.begin(), arr.end())
#define dsortA(arr) sort(arr.begin(), arr.end(), greater<int>())
#define ssort(arr) stable_sort(arr.begin(), arr.end())
#define search(arr, c) binary_search(arr.begin(), arr.end(), c)
#define pb push_back
#define ll long long
#define cl_bf cin.ignore(numeric_limits<streamsize>::max(), '\n');
#define castl static_cast<ll>
#define BRAHAMASTRA ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ull unsigned long long int
 
void dfs(vector<vector<int> >& adj,int src,unordered_map<int,int>& mp,vector<bool>& visited,int& count)
{
	visited[src]=true;
	if(mp.find(src)!=mp.end())
	{
		count++;
		return;
	}
	for(auto child:adj[src])
	{
		if(!visited[child])
			dfs(adj,child,mp,visited,count);
	}
}

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
{
	int n=graph.size();
	int m=graph[0].size();
	vector<vector<int> > adj(n);
	for(int i=0;i<n;++i)
	{
		for(int j=0;j<m;++j)
		{
			if(i==j)
				continue;
			if(graph[i][j]==1)
				adj[i].push_back(j);
		}
	}
	unordered_map<int,int> mp;
	for(auto i:initial)
		mp[i]++;
	for(int i=0;i<n;++i)
	{
		if(mp.find(i)==mp.end())
		{
			vector<bool> visited(n,false);
			int count=0;
			dfs(adj,i,mp,visited,count);
			if(count==1)
				return i;
			cout<<i<<" "<<count<<"\n";
		}
	}
	return -1;
}

int main()
{
       #ifndef ONLINE_JUDGE
              freopen("../input.txt","r",stdin);
              freopen("../output.txt","w",stdout);
       #endif
 
       BRAHAMASTRA

       int t;
       cin>>t;
       while(t--)
       {
       		int n,m;
       cin>>n>>m;
       vector<vector<int> > v(n,vector<int>(n));
       for(int i=0;i<n;++i)
       {
       	for(int j=0;j<n;++j)
       			cin>>v[i][j];
       }
       vi virus(m);
       for(auto& i:virus)
       	cin>>i;
       cout<<minMalwareSpread(v,virus)<<"\n";
       }
}